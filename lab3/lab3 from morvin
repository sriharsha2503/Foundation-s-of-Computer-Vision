#Q1
import cv2
import numpy as np


def custom_blur(image, kernel_size):
    kernel = np.ones((kernel_size, kernel_size), np.float32) / (kernel_size * kernel_size)
    return cv2.filter2D(image, -1, kernel)


def unsharp_masking(image, kernel_size, alpha):
    blurred_image = custom_blur(image, kernel_size)

    image_float = image.astype(np.float32)
    blurred_image_float = blurred_image.astype(np.float32)

    mask = cv2.subtract(image_float, blurred_image_float)

    sharpened_image_float = cv2.add(image_float, alpha * mask)

    sharpened_image = np.clip(sharpened_image_float, 0, 255).astype(np.uint8)

    return sharpened_image


def main():
    image_path = 'image.jpg'
    image = cv2.imread(image_path)

    if image is None:
        print("Error: Image not found.")
        return

    kernel_size = 5
    alpha = 1.5


    sharpened_image = unsharp_masking(image, kernel_size, alpha)

    cv2.imshow('Original Image', image)
    cv2.imshow('Sharpened Image', sharpened_image)

    cv2.imwrite('sharpened_image.jpg', sharpened_image)

    cv2.waitKey(0)
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
==================================================================================================
Q2
import cv2
import numpy as np


def apply_kernel(image, kernel):
    rows, cols = image.shape
    ksize = kernel.shape[0]
    pad = ksize // 2

    padded_image = np.pad(image, ((pad, pad), (pad, pad)), mode='constant', constant_values=0)

    output = np.zeros_like(image, dtype=np.float64)

    for i in range(rows):
        for j in range(cols):
            region = padded_image[i:i + ksize, j:j + ksize]
            output[i, j] = np.sum(region * kernel)

    return output


def compute_gradients(image):
    sobel_x = np.array([[-1, 0, 1],
                        [-2, 0, 2],
                        [-1, 0, 1]], dtype=np.float64)

    sobel_y = np.array([[-1, -2, -1],
                        [0, 0, 0],
                        [1, 2, 1]], dtype=np.float64)

    grad_x = apply_kernel(image, sobel_x)
    grad_y = apply_kernel(image, sobel_y)

    magnitude = np.sqrt(grad_x ** 2 + grad_y ** 2)
    direction = np.arctan2(grad_y, grad_x) * (180 / np.pi)

    return grad_x, grad_y, magnitude, direction


def main():
    image_path = 'image.jpg'
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    if image is None:
        print("Error: Image not found.")
        return

    grad_x, grad_y, magnitude, direction = compute_gradients(image)

    magnitude = cv2.normalize(magnitude, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)
    direction = cv2.normalize(direction, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)

    cv2.imshow('Gradient X', grad_x.astype(np.uint8))
    cv2.imshow('Gradient Y', grad_y.astype(np.uint8))
    cv2.imshow('Gradient Magnitude', magnitude)
    cv2.imshow('Gradient Direction', direction)

    cv2.imwrite('gradient_x.jpg', grad_x.astype(np.uint8))
    cv2.imwrite('gradient_y.jpg', grad_y.astype(np.uint8))
    cv2.imwrite('gradient_magnitude.jpg', magnitude)
    cv2.imwrite('gradient_direction.jpg', direction)

    cv2.waitKey(0)
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()

====================================================================================
Q3
import cv2
import numpy as np


def apply_kernel(image, kernel):
    rows, cols = image.shape
    ksize = kernel.shape[0]
    pad = ksize // 2

    padded_image = np.pad(image, ((pad, pad), (pad, pad)), mode='constant', constant_values=0)

    output = np.zeros_like(image, dtype=np.float64)

    for i in range(rows):
        for j in range(cols):
            region = padded_image[i:i + ksize, j:j + ksize]
            output[i, j] = np.sum(region * kernel)

    return output


def box_filter(image, kernel_size):
    box_kernel = np.ones((kernel_size, kernel_size), dtype=np.float64) / (kernel_size * kernel_size)
    return apply_kernel(image, box_kernel)


def gaussian_filter(image, kernel_size, sigma):
    ax = np.arange(-kernel_size // 2 + 1., kernel_size // 2 + 1.)
    xx, yy = np.meshgrid(ax, ax)
    kernel = np.exp(-0.5 * (xx ** 2 + yy ** 2) / sigma ** 2)
    kernel /= np.sum(kernel)
    return apply_kernel(image, kernel)


def main():
    image_path = 'image.jpg'
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    if image is None:
        print("Error: Image not found.")
        return

    kernel_size = 5
    sigma = 1.0

    box_filtered_image = box_filter(image, kernel_size)
    gaussian_filtered_image = gaussian_filter(image, kernel_size, sigma)

    box_filtered_image = cv2.normalize(box_filtered_image, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)
    gaussian_filtered_image = cv2.normalize(gaussian_filtered_image, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)

    cv2.imshow('Original Image', image)
    cv2.imshow('Box Filter Output', box_filtered_image)
    cv2.imshow('Gaussian Filter Output', gaussian_filtered_image)

    cv2.imwrite('box_filtered_image.jpg', box_filtered_image)
    cv2.imwrite('gaussian_filtered_image.jpg', gaussian_filtered_image)

    cv2.waitKey(0)
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()

============================================================================================
Q4
import cv2
import numpy as np


def apply_kernel(image, kernel):
    rows, cols = image.shape
    ksize = kernel.shape[0] 
    pad = ksize // 2

    padded_image = np.pad(image, ((pad, pad), (pad, pad)), mode='constant', constant_values=0)

    output = np.zeros_like(image, dtype=np.float64)

    for i in range(rows):
        for j in range(cols):
            region = padded_image[i:i + ksize, j:j + ksize]
            output[i, j] = np.sum(region * kernel)

    return output


def laplacian_edge_detection(image):
    # Define the Laplacian kernel
    laplacian_kernel = np.array([[0, 1, 0],
                                 [1, -4, 1],
                                 [0, 1, 0]], dtype=np.float64)

    laplacian_edges = apply_kernel(image, laplacian_kernel)

    # Normalize the result to the range [0, 255]
    laplacian_edges = np.abs(laplacian_edges)
    normalized_edges = cv2.normalize(laplacian_edges, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)

    return normalized_edges


def main():
    image_path = 'image.jpg'  # Change this to your image path
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    if image is None:
        print("Error: Image not found.")
        return

    edge_magnitude = laplacian_edge_detection(image)

    cv2.imshow('Original Image', image)
    cv2.imshow('Edge Detection', edge_magnitude)

    cv2.imwrite('laplacian_edge_detection.jpg', edge_magnitude)

    cv2.waitKey(0)
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
=====================================================================================

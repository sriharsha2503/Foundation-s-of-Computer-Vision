#question 1
import numpy as np
import pandas as pd

df = pd.read_csv('study_scores.csv')

X = df['Study_time_hours'].values
y = df['Score_out_of_10'].values

# Compute means
X_mean = np.mean(X)
y_mean = np.mean(y)

# Compute B1 (slope) using the summation formula
numerator = np.sum((X - X_mean) * (y - y_mean))
denominator = np.sum((X - X_mean) ** 2)
B1 = numerator / denominator

# Compute B0 (intercept)
B0 = y_mean - B1 * X_mean

# Compute predicted responses
y_pred = B0 + B1 * X

# Compute RMSE
RMSE = np.sqrt(np.mean((y - y_pred) ** 2))

print(f"Intercept (B0): {B0:.2f}")
print(f"Slope (B1): {B1:.2f}")
print(f"RMSE: {RMSE:.2f}")





#question 2
import cv2
import numpy as np
import matplotlib.pyplot as plt

def compute_descriptors(image, keypoints, size=16, bin_size=4):
    grad_x, grad_y = np.gradient(image.astype(np.float32))
    descriptors = []

    for kp in keypoints:
        x, y = int(kp.pt[0]), int(kp.pt[1])
        patch = image[y-size:y+size, x-size:x+size]
        grad_x_patch, grad_y_patch = grad_x[y-size:y+size, x-size:x+size], grad_y[y-size:y+size, x-size:x+size]

        magnitudes = np.sqrt(grad_x_patch**2 + grad_y_patch**2)
        orientations = np.arctan2(grad_y_patch, grad_x_patch) * 180 / np.pi
        orientations[orientations < 0] += 360

        histograms = np.zeros((bin_size, bin_size, 8))
        for i in range(bin_size):
            for j in range(bin_size):
                bin_x, bin_y = i * size // bin_size, j * size // bin_size
                mag = magnitudes[bin_x:bin_x + size // bin_size, bin_y:bin_y + size // bin_size].flatten()
                ori = orientations[bin_x:bin_x + size // bin_size, bin_y:bin_y + size // bin_size].flatten()
                for k in range(len(mag)):
                    bin_idx = int(ori[k] / 45) % 8
                    histograms[i, j, bin_idx] += mag[k]

        descriptor = histograms.flatten()
        descriptor /= np.linalg.norm(descriptor) + 1e-7
        descriptors.append(descriptor)

    return np.array(descriptors)

def apply_sift(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    sift = cv2.SIFT_create()
    keypoints, descriptors = sift.detectAndCompute(img, None)

    custom_descriptors = compute_descriptors(img, keypoints)

    print(f"OpenCV SIFT descriptors shape: {descriptors.shape}")
    print(f"Custom SIFT descriptors shape: {custom_descriptors.shape}")

    img_with_keypoints = cv2.drawKeypoints(img, keypoints, None)
    plt.subplot(1, 2, 1)
    plt.title('OpenCV SIFT')
    plt.imshow(cv2.cvtColor(img_with_keypoints, cv2.COLOR_BGR2RGB))

    plt.subplot(1, 2, 2)
    plt.title('Custom SIFT')
    plt.imshow(cv2.cvtColor(img_with_keypoints, cv2.COLOR_BGR2RGB))






extra
import cv2
import numpy as np
import matplotlib.pyplot as plt

def harris_corner_manual(image_path, k=0.04, threshold=0.01):
    # Read and convert the image to grayscale
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY).astype(np.float32)
    
    # Compute gradients using Sobel operators
    I_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
    I_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)

    # Compute products of derivatives at each pixel
    I_x2 = I_x ** 2
    I_y2 = I_y ** 2
    I_xy = I_x * I_y

    # Apply Gaussian filter to the derivative products
    S_x2 = cv2.GaussianBlur(I_x2, (5, 5), 1.5)
    S_y2 = cv2.GaussianBlur(I_y2, (5, 5), 1.5)
    S_xy = cv2.GaussianBlur(I_xy, (5, 5), 1.5)

    # Compute the response of the detector at each pixel (Harris matrix)
    det_M = (S_x2 * S_y2) - (S_xy ** 2)
    trace_M = S_x2 + S_y2
    R = det_M - k * (trace_M ** 2)

    # Threshold the response to identify corners
    img[R > threshold * R.max()] = [0, 0, 255]

    # Display the result
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.title('Manual Harris Corner Detection')
    plt.axis('off')
    plt.show()

harris_corner_manual('../images/lanes.png')
def fast_corner_manual(image_path, threshold=50):
    # Read and convert the image to grayscale
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Coordinates of the circular pattern used in FAST
    circle_coords = [(0, -3), (1, -3), (2, -2), (3, -1), (3, 0), (3, 1), (2, 2), (1, 3), (0, 3), 
                     (-1, 3), (-2, 2), (-3, 1), (-3, 0), (-3, -1), (-2, -2), (-1, -3)]
    
    corners = []
    
    # Loop through the image (ignoring the edges)
    for y in range(3, gray.shape[0] - 3):
        for x in range(3, gray.shape[1] - 3):
            # Get the intensity of the center pixel
            center_intensity = gray[y, x]
            
            # Check the number of contiguous pixels that are brighter or darker by the threshold
            brighter = 0
            darker = 0
            for dx, dy in circle_coords:
                pixel_intensity = gray[y + dy, x + dx]
                if pixel_intensity > center_intensity + threshold:
                    brighter += 1
                elif pixel_intensity < center_intensity - threshold:
                    darker += 1
            
            # A corner is detected if at least 9 contiguous pixels are either brighter or darker
            if brighter >= 9 or darker >= 9:
                corners.append((x, y))
    
    # Draw corners on the image
    for x, y in corners:
        cv2.circle(img, (x, y), 2, (0, 255, 0), -1)
    
    # Display the result
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.title('Manual FAST Corner Detection')
    plt.axis('off')
    plt.show()

fast_corner_manual('../images/lanes.png')
    plt.show()

# Example usage
apply_sift('../images/lanes.png')



